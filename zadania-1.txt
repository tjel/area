---------------------------------------
1. Zmieniamy globalne ustawienia gita

git config --global user.email "imie.nazwisko@gmail.com"
git config --global user.name "imie-nazwisko"

(opcjonalnie)
git config --global credential.helper "cache --timeout=7200" 
git config --global credential.helper store
git config --global core.editor "nano"

git config --list


---------------------------------------
2. Tworzymy katalog ~/area-test

mkdir ~/area-test
cd ~/area-test


---------------------------------------
3. Dodajemy plik .gitignore i README.md

nano .gitignore
cat ~/.gitignore
*.[oa]
echo "# area-test" >> README.md


---------------------------------------
4. Dodajemy plik circle.cpp

nano circle.cpp
cat ~/circle.cpp
# include <iostream>

using namespace std;

int main( ) 
{ 
    float PI = 3.14;                // variables can be initialized during declaration 
    integer rad; 
    cout<< "Enter the radius"; 
    cin>>rad; 
    cout<< "Area of the circle is: "<< PI * rad * rad; 
    return 0;
}  


---------------------------------------
5. Inicjalizacja lokalnego repozytorium

ls -la
git init
ls -la 
git status
git add circle.cpp .gitignore README.md
git status
git commit -m 'Initialize area-test repository.'
git status
git log


---------------------------------------
6. Kompilujemy i testujemy

g++ circle.cpp -o circle
gcc circle.cpp -o circle -lstdc++
./circle


---------------------------------------
7. Ulepszyc kod w circle.cpp

- dodac odstep i znak ":" po 'Enter the radius'
- dodac lamanie lini (<<endl) po wyniku 
- jednostki?
- zwiekszyc dokladnosc 'PI'


---------------------------------------
8. GitHub/BitBucket/GitLab

- zakladamy konto
- dodajemy repozytorium o nazwie area-test
- sprawdzamy adres repozytorium np. https://github.com/XXX/area-test.git


---------------------------------------
9. Laczymy lokalne repozytorium ~/area-test ze zdalnym github.com/XXX/area-test.git

git remote add origin https://github.com/XXX/area-test.git
git remote -v

---------------------------------------
10. Wysylamy zmiany do zdalnego repozytorium

git push -u origin master

---------------------------------------
11. Sprawdzamy na GitHubie czy zmiany zostaly wyslane

---------------------------------------
12. Klonujemy repozytorium github.com/tjel/triangle-test

cd
git clone https://github.com/tjel/triangle-test.git 
git remote -v

---------------------------------------
13. Wprowadzamy zmiany w lokalnym repozytorium ~/triangle-test

cd triangle-test
cat ~/triangle-test.cpp
# include <iostream>

using namespace std;

int main( ) 
{ 
    double a; 
    double b;
    double c;
    cout<< "Enter a"; 
    cin>>a;
    cout<< "Enter b"; 
    cin>>b;
    cout<< "Enter c"; 
    cin>>c;
 
    cout<< "Perimeter of the triangle is: "<< a+b+c; 
    return 0;
} 

git log

---------------------------------------
14. Tworzymy na GitHubie zdalne repozytorium https://github.com/XXX/triangle-test


---------------------------------------
15. Laczymy lokalne repozytorium ~/triangle-test ze zdalnym https://github.com/XXX/triangle-test

cd ~/triangle-test
git remote remove origin 
git remote add origin https://github.com/XXX/triangle-test.git
git remote -v
git push -u origin master

---------------------------------------
16. Klonujemy github.com/tjel/area.git i powtarzamy pkt. 7 

git clone https://github.com/tjel/area.git
cd area

---------------------------------------
17. Ponownie ulepszamy kod w circle.cpp

- co sie stanie gdy wpiszemy np. rad = -2 albo rad = 2.8
- zmienic typ zmiennej 'rad' na 'double'
- dopisac 'if' do obslugi r<0; 'Radius has to be a positive real number. Please correct your input.' 

git fetch && git merge
git pull

[UWAGA NA KONFLIKTY!]

---------------------------------------
18. Rozgaleziamy projekt area-test

cd ~/area-test
git branch
git branch triangle-test
git branch
git checkout triangle-test
ls -la
git status


---------------------------------------
19. Integrujemy kod z pliku ~/triangle-test/triangle-test.cpp do ~/area-test/area-test.cpp


---------------------------------------
20. Scalamy galezie

git branch
git checkout master
git merge --no-ff triangle-test

---------------------------------------
21. Przegladamy historie

git log -p -2
git log --stat
git log --pretty=oneline
git log --pretty=format:"%h %s" --graph

---------------------------------------
22. Dodajemy i wysylamy znaczniki do zdalnego repozytorium

git tag -a v1.1 -m 'Version 1.0'
git tag
git show v1.0
git tag -a 1.0 [abbreviated commit hash]
git push origin --tags

---------------------------------------
23. Dodajemy opis w pliku README.md w formacie GitHub Flavoured Markdown oraz na stronie wiki, przegladamy statystyki


---------------------------------------
24. Forkujemy projekt github/tjel/penta, wprowadzamy zmiany w lokalnym repozytorium oraz dodajemy pull requests


---------------------------------------
25. Forkujemy inny projekt publiczny, dodajemy pull requests; dyskusja nad zmianami w kodzie


